/**
 * Any market indicator, they can be chained to form more complex data.
 */
export interface Indicator<T extends DataPoint | number = DataPoint | number> {
  /**
   * Compute the proper output for the given input and change the state.
   *
   * @param input The current input, which can be a OHLCV if the current
   * indicator is depended on the candle's data or a number if it's depended
   * on the output generated by another indicator.
   */
  next(input: T): number | null;
}

/**
 * An OHLCV data point.
 */
export interface DataPoint {
  readonly open: number;
  readonly high: number;
  readonly low: number;
  readonly close: number;
  readonly volume: number;
}
